// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: egm_wrapper_trajectory.proto

#include "egm_wrapper_trajectory.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace abb {
namespace egm {
namespace wrapper {
namespace trajectory {
constexpr JointGoal::JointGoal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , velocity_(nullptr)
  , acceleration_(nullptr){}
struct JointGoalDefaultTypeInternal {
  constexpr JointGoalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JointGoalDefaultTypeInternal() {}
  union {
    JointGoal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JointGoalDefaultTypeInternal _JointGoal_default_instance_;
constexpr CartesianGoal::CartesianGoal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_(nullptr)
  , velocity_(nullptr)
  , acceleration_(nullptr){}
struct CartesianGoalDefaultTypeInternal {
  constexpr CartesianGoalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CartesianGoalDefaultTypeInternal() {}
  union {
    CartesianGoal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CartesianGoalDefaultTypeInternal _CartesianGoal_default_instance_;
constexpr RobotGoal::RobotGoal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : joints_(nullptr)
  , cartesian_(nullptr){}
struct RobotGoalDefaultTypeInternal {
  constexpr RobotGoalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotGoalDefaultTypeInternal() {}
  union {
    RobotGoal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotGoalDefaultTypeInternal _RobotGoal_default_instance_;
constexpr ExternalGoal::ExternalGoal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : joints_(nullptr){}
struct ExternalGoalDefaultTypeInternal {
  constexpr ExternalGoalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExternalGoalDefaultTypeInternal() {}
  union {
    ExternalGoal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExternalGoalDefaultTypeInternal _ExternalGoal_default_instance_;
constexpr PointGoal::PointGoal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : robot_(nullptr)
  , external_(nullptr)
  , duration_(0)
  , reach_(false){}
struct PointGoalDefaultTypeInternal {
  constexpr PointGoalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointGoalDefaultTypeInternal() {}
  union {
    PointGoal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointGoalDefaultTypeInternal _PointGoal_default_instance_;
constexpr RobotPositionGoal::RobotPositionGoal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : joints_(nullptr)
  , cartesian_(nullptr){}
struct RobotPositionGoalDefaultTypeInternal {
  constexpr RobotPositionGoalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotPositionGoalDefaultTypeInternal() {}
  union {
    RobotPositionGoal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotPositionGoalDefaultTypeInternal _RobotPositionGoal_default_instance_;
constexpr RobotVelocityGoal::RobotVelocityGoal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : joints_(nullptr)
  , cartesian_(nullptr){}
struct RobotVelocityGoalDefaultTypeInternal {
  constexpr RobotVelocityGoalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotVelocityGoalDefaultTypeInternal() {}
  union {
    RobotVelocityGoal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotVelocityGoalDefaultTypeInternal _RobotVelocityGoal_default_instance_;
constexpr TrajectoryGoal::TrajectoryGoal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_(){}
struct TrajectoryGoalDefaultTypeInternal {
  constexpr TrajectoryGoalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrajectoryGoalDefaultTypeInternal() {}
  union {
    TrajectoryGoal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrajectoryGoalDefaultTypeInternal _TrajectoryGoal_default_instance_;
constexpr StaticPositionGoal::StaticPositionGoal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : robot_(nullptr)
  , external_(nullptr){}
struct StaticPositionGoalDefaultTypeInternal {
  constexpr StaticPositionGoalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StaticPositionGoalDefaultTypeInternal() {}
  union {
    StaticPositionGoal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StaticPositionGoalDefaultTypeInternal _StaticPositionGoal_default_instance_;
constexpr StaticVelocityGoal::StaticVelocityGoal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : robot_(nullptr)
  , external_(nullptr){}
struct StaticVelocityGoalDefaultTypeInternal {
  constexpr StaticVelocityGoalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StaticVelocityGoalDefaultTypeInternal() {}
  union {
    StaticVelocityGoal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StaticVelocityGoalDefaultTypeInternal _StaticVelocityGoal_default_instance_;
constexpr ExecutionProgress::ExecutionProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_(nullptr)
  , outputs_(nullptr)
  , goal_(nullptr)
  , active_trajectory_(nullptr)
  , state_(0)

  , sub_state_(0)

  , time_passed_(0)
  , goal_active_(false)
  , pending_trajectories_(0u){}
struct ExecutionProgressDefaultTypeInternal {
  constexpr ExecutionProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionProgressDefaultTypeInternal() {}
  union {
    ExecutionProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionProgressDefaultTypeInternal _ExecutionProgress_default_instance_;
}  // namespace trajectory
}  // namespace wrapper
}  // namespace egm
}  // namespace abb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_egm_5fwrapper_5ftrajectory_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_egm_5fwrapper_5ftrajectory_2eproto = nullptr;

const uint32_t TableStruct_egm_5fwrapper_5ftrajectory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::JointGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::JointGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::JointGoal, position_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::JointGoal, velocity_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::JointGoal, acceleration_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::CartesianGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::CartesianGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::CartesianGoal, pose_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::CartesianGoal, velocity_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::CartesianGoal, acceleration_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotGoal, joints_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotGoal, cartesian_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExternalGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExternalGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExternalGoal, joints_),
  0,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, duration_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, robot_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, external_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, reach_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotPositionGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotPositionGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotPositionGoal, joints_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotPositionGoal, cartesian_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotVelocityGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotVelocityGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotVelocityGoal, joints_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotVelocityGoal, cartesian_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::TrajectoryGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::TrajectoryGoal, points_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticPositionGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticPositionGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticPositionGoal, robot_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticPositionGoal, external_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticVelocityGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticVelocityGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticVelocityGoal, robot_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticVelocityGoal, external_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, state_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, sub_state_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, inputs_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, outputs_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, time_passed_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, goal_active_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, goal_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, active_trajectory_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, pending_trajectories_),
  4,
  5,
  0,
  1,
  6,
  7,
  2,
  3,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::abb::egm::wrapper::trajectory::JointGoal)},
  { 12, 21, -1, sizeof(::abb::egm::wrapper::trajectory::CartesianGoal)},
  { 24, 32, -1, sizeof(::abb::egm::wrapper::trajectory::RobotGoal)},
  { 34, 41, -1, sizeof(::abb::egm::wrapper::trajectory::ExternalGoal)},
  { 42, 52, -1, sizeof(::abb::egm::wrapper::trajectory::PointGoal)},
  { 56, 64, -1, sizeof(::abb::egm::wrapper::trajectory::RobotPositionGoal)},
  { 66, 74, -1, sizeof(::abb::egm::wrapper::trajectory::RobotVelocityGoal)},
  { 76, -1, -1, sizeof(::abb::egm::wrapper::trajectory::TrajectoryGoal)},
  { 83, 91, -1, sizeof(::abb::egm::wrapper::trajectory::StaticPositionGoal)},
  { 93, 101, -1, sizeof(::abb::egm::wrapper::trajectory::StaticVelocityGoal)},
  { 103, 118, -1, sizeof(::abb::egm::wrapper::trajectory::ExecutionProgress)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::abb::egm::wrapper::trajectory::_JointGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::abb::egm::wrapper::trajectory::_CartesianGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::abb::egm::wrapper::trajectory::_RobotGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::abb::egm::wrapper::trajectory::_ExternalGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::abb::egm::wrapper::trajectory::_PointGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::abb::egm::wrapper::trajectory::_RobotPositionGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::abb::egm::wrapper::trajectory::_RobotVelocityGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::abb::egm::wrapper::trajectory::_TrajectoryGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::abb::egm::wrapper::trajectory::_StaticPositionGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::abb::egm::wrapper::trajectory::_StaticVelocityGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::abb::egm::wrapper::trajectory::_ExecutionProgress_default_instance_),
};

const char descriptor_table_protodef_egm_5fwrapper_5ftrajectory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034egm_wrapper_trajectory.proto\022\032abb.egm."
  "wrapper.trajectory\032\021egm_wrapper.proto\"\220\001"
  "\n\tJointGoal\022)\n\010position\030\001 \001(\0132\027.abb.egm."
  "wrapper.Joints\022)\n\010velocity\030\002 \001(\0132\027.abb.e"
  "gm.wrapper.Joints\022-\n\014acceleration\030\003 \001(\0132"
  "\027.abb.egm.wrapper.Joints\"\235\001\n\rCartesianGo"
  "al\022,\n\004pose\030\001 \001(\0132\036.abb.egm.wrapper.Carte"
  "sianPose\022,\n\010velocity\030\002 \001(\0132\032.abb.egm.wra"
  "pper.Cartesian\0220\n\014acceleration\030\003 \001(\0132\032.a"
  "bb.egm.wrapper.Cartesian\"\200\001\n\tRobotGoal\0225"
  "\n\006joints\030\001 \001(\0132%.abb.egm.wrapper.traject"
  "ory.JointGoal\022<\n\tcartesian\030\002 \001(\0132).abb.e"
  "gm.wrapper.trajectory.CartesianGoal\"E\n\014E"
  "xternalGoal\0225\n\006joints\030\001 \001(\0132%.abb.egm.wr"
  "apper.trajectory.JointGoal\"\236\001\n\tPointGoal"
  "\022\020\n\010duration\030\001 \001(\001\0224\n\005robot\030\002 \001(\0132%.abb."
  "egm.wrapper.trajectory.RobotGoal\022:\n\010exte"
  "rnal\030\003 \001(\0132(.abb.egm.wrapper.trajectory."
  "ExternalGoal\022\r\n\005reach\030\004 \001(\010\"o\n\021RobotPosi"
  "tionGoal\022\'\n\006joints\030\001 \001(\0132\027.abb.egm.wrapp"
  "er.Joints\0221\n\tcartesian\030\002 \001(\0132\036.abb.egm.w"
  "rapper.CartesianPose\"s\n\021RobotVelocityGoa"
  "l\022\'\n\006joints\030\001 \001(\0132\027.abb.egm.wrapper.Join"
  "ts\0225\n\tcartesian\030\002 \001(\0132\".abb.egm.wrapper."
  "CartesianVelocity\"G\n\016TrajectoryGoal\0225\n\006p"
  "oints\030\001 \003(\0132%.abb.egm.wrapper.trajectory"
  ".PointGoal\"}\n\022StaticPositionGoal\022<\n\005robo"
  "t\030\001 \001(\0132-.abb.egm.wrapper.trajectory.Rob"
  "otPositionGoal\022)\n\010external\030\002 \001(\0132\027.abb.e"
  "gm.wrapper.Joints\"}\n\022StaticVelocityGoal\022"
  "<\n\005robot\030\001 \001(\0132-.abb.egm.wrapper.traject"
  "ory.RobotVelocityGoal\022)\n\010external\030\002 \001(\0132"
  "\027.abb.egm.wrapper.Joints\"\276\004\n\021ExecutionPr"
  "ogress\022M\n\005state\030\001 \001(\01623.abb.egm.wrapper."
  "trajectory.ExecutionProgress.State:\tUNDE"
  "FINED\022O\n\tsub_state\030\002 \001(\01626.abb.egm.wrapp"
  "er.trajectory.ExecutionProgress.SubState"
  ":\004NONE\022&\n\006inputs\030\003 \001(\0132\026.abb.egm.wrapper"
  ".Input\022(\n\007outputs\030\004 \001(\0132\027.abb.egm.wrappe"
  "r.Output\022\023\n\013time_passed\030\005 \001(\001\022\023\n\013goal_ac"
  "tive\030\006 \001(\010\0223\n\004goal\030\007 \001(\0132%.abb.egm.wrapp"
  "er.trajectory.PointGoal\022E\n\021active_trajec"
  "tory\030\010 \001(\0132*.abb.egm.wrapper.trajectory."
  "TrajectoryGoal\022\034\n\024pending_trajectories\030\t"
  " \001(\r\"B\n\005State\022\r\n\tUNDEFINED\020\000\022\n\n\006NORMAL\020\001"
  "\022\r\n\tRAMP_DOWN\020\002\022\017\n\013STATIC_GOAL\020\003\"/\n\010SubS"
  "tate\022\010\n\004NONE\020\000\022\013\n\007RUNNING\020\001\022\014\n\010FINISHED\020"
  "\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_deps[1] = {
  &::descriptor_table_egm_5fwrapper_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_egm_5fwrapper_5ftrajectory_2eproto = {
  false, false, 1881, descriptor_table_protodef_egm_5fwrapper_5ftrajectory_2eproto, "egm_wrapper_trajectory.proto", 
  &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once, descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_deps, 1, 11,
  schemas, file_default_instances, TableStruct_egm_5fwrapper_5ftrajectory_2eproto::offsets,
  file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto, file_level_enum_descriptors_egm_5fwrapper_5ftrajectory_2eproto, file_level_service_descriptors_egm_5fwrapper_5ftrajectory_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter() {
  return &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_egm_5fwrapper_5ftrajectory_2eproto(&descriptor_table_egm_5fwrapper_5ftrajectory_2eproto);
namespace abb {
namespace egm {
namespace wrapper {
namespace trajectory {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExecutionProgress_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_egm_5fwrapper_5ftrajectory_2eproto);
  return file_level_enum_descriptors_egm_5fwrapper_5ftrajectory_2eproto[0];
}
bool ExecutionProgress_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ExecutionProgress_State ExecutionProgress::UNDEFINED;
constexpr ExecutionProgress_State ExecutionProgress::NORMAL;
constexpr ExecutionProgress_State ExecutionProgress::RAMP_DOWN;
constexpr ExecutionProgress_State ExecutionProgress::STATIC_GOAL;
constexpr ExecutionProgress_State ExecutionProgress::State_MIN;
constexpr ExecutionProgress_State ExecutionProgress::State_MAX;
constexpr int ExecutionProgress::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExecutionProgress_SubState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_egm_5fwrapper_5ftrajectory_2eproto);
  return file_level_enum_descriptors_egm_5fwrapper_5ftrajectory_2eproto[1];
}
bool ExecutionProgress_SubState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ExecutionProgress_SubState ExecutionProgress::NONE;
constexpr ExecutionProgress_SubState ExecutionProgress::RUNNING;
constexpr ExecutionProgress_SubState ExecutionProgress::FINISHED;
constexpr ExecutionProgress_SubState ExecutionProgress::SubState_MIN;
constexpr ExecutionProgress_SubState ExecutionProgress::SubState_MAX;
constexpr int ExecutionProgress::SubState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class JointGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<JointGoal>()._has_bits_);
  static const ::abb::egm::wrapper::Joints& position(const JointGoal* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::Joints& velocity(const JointGoal* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::egm::wrapper::Joints& acceleration(const JointGoal* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::abb::egm::wrapper::Joints&
JointGoal::_Internal::position(const JointGoal* msg) {
  return *msg->position_;
}
const ::abb::egm::wrapper::Joints&
JointGoal::_Internal::velocity(const JointGoal* msg) {
  return *msg->velocity_;
}
const ::abb::egm::wrapper::Joints&
JointGoal::_Internal::acceleration(const JointGoal* msg) {
  return *msg->acceleration_;
}
void JointGoal::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void JointGoal::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void JointGoal::clear_acceleration() {
  if (acceleration_ != nullptr) acceleration_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
JointGoal::JointGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.JointGoal)
}
JointGoal::JointGoal(const JointGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::abb::egm::wrapper::Joints(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::abb::egm::wrapper::Joints(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_acceleration()) {
    acceleration_ = new ::abb::egm::wrapper::Joints(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.JointGoal)
}

inline void JointGoal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&acceleration_) -
    reinterpret_cast<char*>(&position_)) + sizeof(acceleration_));
}

JointGoal::~JointGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.JointGoal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JointGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
}

void JointGoal::ArenaDtor(void* object) {
  JointGoal* _this = reinterpret_cast< JointGoal* >(object);
  (void)_this;
}
void JointGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JointGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.JointGoal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(acceleration_ != nullptr);
      acceleration_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.Joints position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.Joints velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.Joints acceleration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JointGoal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.JointGoal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.Joints position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // optional .abb.egm.wrapper.Joints velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::velocity(this), target, stream);
  }

  // optional .abb.egm.wrapper.Joints acceleration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::acceleration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.JointGoal)
  return target;
}

size_t JointGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.JointGoal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .abb.egm.wrapper.Joints position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .abb.egm.wrapper.Joints velocity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .abb.egm.wrapper.Joints acceleration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acceleration_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JointGoal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JointGoal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JointGoal::GetClassData() const { return &_class_data_; }

void JointGoal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JointGoal *>(to)->MergeFrom(
      static_cast<const JointGoal &>(from));
}


void JointGoal::MergeFrom(const JointGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.JointGoal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::abb::egm::wrapper::Joints::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_velocity()->::abb::egm::wrapper::Joints::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_acceleration()->::abb::egm::wrapper::Joints::MergeFrom(from._internal_acceleration());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JointGoal::CopyFrom(const JointGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.JointGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointGoal::IsInitialized() const {
  return true;
}

void JointGoal::InternalSwap(JointGoal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointGoal, acceleration_)
      + sizeof(JointGoal::acceleration_)
      - PROTOBUF_FIELD_OFFSET(JointGoal, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointGoal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[0]);
}

// ===================================================================

class CartesianGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<CartesianGoal>()._has_bits_);
  static const ::abb::egm::wrapper::CartesianPose& pose(const CartesianGoal* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::Cartesian& velocity(const CartesianGoal* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::egm::wrapper::Cartesian& acceleration(const CartesianGoal* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::abb::egm::wrapper::CartesianPose&
CartesianGoal::_Internal::pose(const CartesianGoal* msg) {
  return *msg->pose_;
}
const ::abb::egm::wrapper::Cartesian&
CartesianGoal::_Internal::velocity(const CartesianGoal* msg) {
  return *msg->velocity_;
}
const ::abb::egm::wrapper::Cartesian&
CartesianGoal::_Internal::acceleration(const CartesianGoal* msg) {
  return *msg->acceleration_;
}
void CartesianGoal::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CartesianGoal::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CartesianGoal::clear_acceleration() {
  if (acceleration_ != nullptr) acceleration_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CartesianGoal::CartesianGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.CartesianGoal)
}
CartesianGoal::CartesianGoal(const CartesianGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::abb::egm::wrapper::CartesianPose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::abb::egm::wrapper::Cartesian(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_acceleration()) {
    acceleration_ = new ::abb::egm::wrapper::Cartesian(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.CartesianGoal)
}

inline void CartesianGoal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pose_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&acceleration_) -
    reinterpret_cast<char*>(&pose_)) + sizeof(acceleration_));
}

CartesianGoal::~CartesianGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.CartesianGoal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CartesianGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
}

void CartesianGoal::ArenaDtor(void* object) {
  CartesianGoal* _this = reinterpret_cast< CartesianGoal* >(object);
  (void)_this;
}
void CartesianGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CartesianGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CartesianGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.CartesianGoal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pose_ != nullptr);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(acceleration_ != nullptr);
      acceleration_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CartesianGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.CartesianPose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.Cartesian velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.Cartesian acceleration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CartesianGoal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.CartesianGoal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.CartesianPose pose = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  // optional .abb.egm.wrapper.Cartesian velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::velocity(this), target, stream);
  }

  // optional .abb.egm.wrapper.Cartesian acceleration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::acceleration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.CartesianGoal)
  return target;
}

size_t CartesianGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.CartesianGoal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .abb.egm.wrapper.CartesianPose pose = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional .abb.egm.wrapper.Cartesian velocity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .abb.egm.wrapper.Cartesian acceleration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acceleration_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CartesianGoal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CartesianGoal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CartesianGoal::GetClassData() const { return &_class_data_; }

void CartesianGoal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CartesianGoal *>(to)->MergeFrom(
      static_cast<const CartesianGoal &>(from));
}


void CartesianGoal::MergeFrom(const CartesianGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.CartesianGoal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pose()->::abb::egm::wrapper::CartesianPose::MergeFrom(from._internal_pose());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_velocity()->::abb::egm::wrapper::Cartesian::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_acceleration()->::abb::egm::wrapper::Cartesian::MergeFrom(from._internal_acceleration());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CartesianGoal::CopyFrom(const CartesianGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.CartesianGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianGoal::IsInitialized() const {
  return true;
}

void CartesianGoal::InternalSwap(CartesianGoal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartesianGoal, acceleration_)
      + sizeof(CartesianGoal::acceleration_)
      - PROTOBUF_FIELD_OFFSET(CartesianGoal, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CartesianGoal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[1]);
}

// ===================================================================

class RobotGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotGoal>()._has_bits_);
  static const ::abb::egm::wrapper::trajectory::JointGoal& joints(const RobotGoal* msg);
  static void set_has_joints(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::trajectory::CartesianGoal& cartesian(const RobotGoal* msg);
  static void set_has_cartesian(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::wrapper::trajectory::JointGoal&
RobotGoal::_Internal::joints(const RobotGoal* msg) {
  return *msg->joints_;
}
const ::abb::egm::wrapper::trajectory::CartesianGoal&
RobotGoal::_Internal::cartesian(const RobotGoal* msg) {
  return *msg->cartesian_;
}
RobotGoal::RobotGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.RobotGoal)
}
RobotGoal::RobotGoal(const RobotGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_joints()) {
    joints_ = new ::abb::egm::wrapper::trajectory::JointGoal(*from.joints_);
  } else {
    joints_ = nullptr;
  }
  if (from._internal_has_cartesian()) {
    cartesian_ = new ::abb::egm::wrapper::trajectory::CartesianGoal(*from.cartesian_);
  } else {
    cartesian_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.RobotGoal)
}

inline void RobotGoal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&joints_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cartesian_) -
    reinterpret_cast<char*>(&joints_)) + sizeof(cartesian_));
}

RobotGoal::~RobotGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.RobotGoal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete joints_;
  if (this != internal_default_instance()) delete cartesian_;
}

void RobotGoal::ArenaDtor(void* object) {
  RobotGoal* _this = reinterpret_cast< RobotGoal* >(object);
  (void)_this;
}
void RobotGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.RobotGoal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(joints_ != nullptr);
      joints_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cartesian_ != nullptr);
      cartesian_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_joints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cartesian(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RobotGoal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.RobotGoal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::joints(this), target, stream);
  }

  // optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cartesian(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.RobotGoal)
  return target;
}

size_t RobotGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.RobotGoal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *joints_);
    }

    // optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cartesian_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotGoal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotGoal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotGoal::GetClassData() const { return &_class_data_; }

void RobotGoal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RobotGoal *>(to)->MergeFrom(
      static_cast<const RobotGoal &>(from));
}


void RobotGoal::MergeFrom(const RobotGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.RobotGoal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_joints()->::abb::egm::wrapper::trajectory::JointGoal::MergeFrom(from._internal_joints());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cartesian()->::abb::egm::wrapper::trajectory::CartesianGoal::MergeFrom(from._internal_cartesian());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotGoal::CopyFrom(const RobotGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.RobotGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotGoal::IsInitialized() const {
  return true;
}

void RobotGoal::InternalSwap(RobotGoal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotGoal, cartesian_)
      + sizeof(RobotGoal::cartesian_)
      - PROTOBUF_FIELD_OFFSET(RobotGoal, joints_)>(
          reinterpret_cast<char*>(&joints_),
          reinterpret_cast<char*>(&other->joints_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotGoal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[2]);
}

// ===================================================================

class ExternalGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<ExternalGoal>()._has_bits_);
  static const ::abb::egm::wrapper::trajectory::JointGoal& joints(const ExternalGoal* msg);
  static void set_has_joints(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::abb::egm::wrapper::trajectory::JointGoal&
ExternalGoal::_Internal::joints(const ExternalGoal* msg) {
  return *msg->joints_;
}
ExternalGoal::ExternalGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.ExternalGoal)
}
ExternalGoal::ExternalGoal(const ExternalGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_joints()) {
    joints_ = new ::abb::egm::wrapper::trajectory::JointGoal(*from.joints_);
  } else {
    joints_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.ExternalGoal)
}

inline void ExternalGoal::SharedCtor() {
joints_ = nullptr;
}

ExternalGoal::~ExternalGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.ExternalGoal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExternalGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete joints_;
}

void ExternalGoal::ArenaDtor(void* object) {
  ExternalGoal* _this = reinterpret_cast< ExternalGoal* >(object);
  (void)_this;
}
void ExternalGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExternalGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExternalGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.ExternalGoal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(joints_ != nullptr);
    joints_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExternalGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_joints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExternalGoal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.ExternalGoal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::joints(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.ExternalGoal)
  return target;
}

size_t ExternalGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.ExternalGoal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *joints_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExternalGoal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExternalGoal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExternalGoal::GetClassData() const { return &_class_data_; }

void ExternalGoal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExternalGoal *>(to)->MergeFrom(
      static_cast<const ExternalGoal &>(from));
}


void ExternalGoal::MergeFrom(const ExternalGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.ExternalGoal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_joints()) {
    _internal_mutable_joints()->::abb::egm::wrapper::trajectory::JointGoal::MergeFrom(from._internal_joints());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExternalGoal::CopyFrom(const ExternalGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.ExternalGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalGoal::IsInitialized() const {
  return true;
}

void ExternalGoal::InternalSwap(ExternalGoal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(joints_, other->joints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternalGoal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[3]);
}

// ===================================================================

class PointGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<PointGoal>()._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::abb::egm::wrapper::trajectory::RobotGoal& robot(const PointGoal* msg);
  static void set_has_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::trajectory::ExternalGoal& external(const PointGoal* msg);
  static void set_has_external(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reach(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::abb::egm::wrapper::trajectory::RobotGoal&
PointGoal::_Internal::robot(const PointGoal* msg) {
  return *msg->robot_;
}
const ::abb::egm::wrapper::trajectory::ExternalGoal&
PointGoal::_Internal::external(const PointGoal* msg) {
  return *msg->external_;
}
PointGoal::PointGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.PointGoal)
}
PointGoal::PointGoal(const PointGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_robot()) {
    robot_ = new ::abb::egm::wrapper::trajectory::RobotGoal(*from.robot_);
  } else {
    robot_ = nullptr;
  }
  if (from._internal_has_external()) {
    external_ = new ::abb::egm::wrapper::trajectory::ExternalGoal(*from.external_);
  } else {
    external_ = nullptr;
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&reach_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(reach_));
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.PointGoal)
}

inline void PointGoal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&robot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reach_) -
    reinterpret_cast<char*>(&robot_)) + sizeof(reach_));
}

PointGoal::~PointGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.PointGoal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PointGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete robot_;
  if (this != internal_default_instance()) delete external_;
}

void PointGoal::ArenaDtor(void* object) {
  PointGoal* _this = reinterpret_cast< PointGoal* >(object);
  (void)_this;
}
void PointGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PointGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.PointGoal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(robot_ != nullptr);
      robot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(external_ != nullptr);
      external_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reach_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(reach_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_external(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reach = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_reach(&has_bits);
          reach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PointGoal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.PointGoal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double duration = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_duration(), target);
  }

  // optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::robot(this), target, stream);
  }

  // optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::external(this), target, stream);
  }

  // optional bool reach = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_reach(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.PointGoal)
  return target;
}

size_t PointGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.PointGoal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *robot_);
    }

    // optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *external_);
    }

    // optional double duration = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool reach = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PointGoal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PointGoal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PointGoal::GetClassData() const { return &_class_data_; }

void PointGoal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PointGoal *>(to)->MergeFrom(
      static_cast<const PointGoal &>(from));
}


void PointGoal::MergeFrom(const PointGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.PointGoal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_robot()->::abb::egm::wrapper::trajectory::RobotGoal::MergeFrom(from._internal_robot());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_external()->::abb::egm::wrapper::trajectory::ExternalGoal::MergeFrom(from._internal_external());
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      reach_ = from.reach_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PointGoal::CopyFrom(const PointGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.PointGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointGoal::IsInitialized() const {
  return true;
}

void PointGoal::InternalSwap(PointGoal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointGoal, reach_)
      + sizeof(PointGoal::reach_)
      - PROTOBUF_FIELD_OFFSET(PointGoal, robot_)>(
          reinterpret_cast<char*>(&robot_),
          reinterpret_cast<char*>(&other->robot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PointGoal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[4]);
}

// ===================================================================

class RobotPositionGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotPositionGoal>()._has_bits_);
  static const ::abb::egm::wrapper::Joints& joints(const RobotPositionGoal* msg);
  static void set_has_joints(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::CartesianPose& cartesian(const RobotPositionGoal* msg);
  static void set_has_cartesian(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::wrapper::Joints&
RobotPositionGoal::_Internal::joints(const RobotPositionGoal* msg) {
  return *msg->joints_;
}
const ::abb::egm::wrapper::CartesianPose&
RobotPositionGoal::_Internal::cartesian(const RobotPositionGoal* msg) {
  return *msg->cartesian_;
}
void RobotPositionGoal::clear_joints() {
  if (joints_ != nullptr) joints_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RobotPositionGoal::clear_cartesian() {
  if (cartesian_ != nullptr) cartesian_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RobotPositionGoal::RobotPositionGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.RobotPositionGoal)
}
RobotPositionGoal::RobotPositionGoal(const RobotPositionGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_joints()) {
    joints_ = new ::abb::egm::wrapper::Joints(*from.joints_);
  } else {
    joints_ = nullptr;
  }
  if (from._internal_has_cartesian()) {
    cartesian_ = new ::abb::egm::wrapper::CartesianPose(*from.cartesian_);
  } else {
    cartesian_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.RobotPositionGoal)
}

inline void RobotPositionGoal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&joints_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cartesian_) -
    reinterpret_cast<char*>(&joints_)) + sizeof(cartesian_));
}

RobotPositionGoal::~RobotPositionGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.RobotPositionGoal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotPositionGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete joints_;
  if (this != internal_default_instance()) delete cartesian_;
}

void RobotPositionGoal::ArenaDtor(void* object) {
  RobotPositionGoal* _this = reinterpret_cast< RobotPositionGoal* >(object);
  (void)_this;
}
void RobotPositionGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotPositionGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotPositionGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(joints_ != nullptr);
      joints_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cartesian_ != nullptr);
      cartesian_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotPositionGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.Joints joints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_joints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.CartesianPose cartesian = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cartesian(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RobotPositionGoal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.Joints joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::joints(this), target, stream);
  }

  // optional .abb.egm.wrapper.CartesianPose cartesian = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cartesian(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.RobotPositionGoal)
  return target;
}

size_t RobotPositionGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.Joints joints = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *joints_);
    }

    // optional .abb.egm.wrapper.CartesianPose cartesian = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cartesian_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotPositionGoal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotPositionGoal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotPositionGoal::GetClassData() const { return &_class_data_; }

void RobotPositionGoal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RobotPositionGoal *>(to)->MergeFrom(
      static_cast<const RobotPositionGoal &>(from));
}


void RobotPositionGoal::MergeFrom(const RobotPositionGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_joints()->::abb::egm::wrapper::Joints::MergeFrom(from._internal_joints());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cartesian()->::abb::egm::wrapper::CartesianPose::MergeFrom(from._internal_cartesian());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotPositionGoal::CopyFrom(const RobotPositionGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotPositionGoal::IsInitialized() const {
  return true;
}

void RobotPositionGoal::InternalSwap(RobotPositionGoal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotPositionGoal, cartesian_)
      + sizeof(RobotPositionGoal::cartesian_)
      - PROTOBUF_FIELD_OFFSET(RobotPositionGoal, joints_)>(
          reinterpret_cast<char*>(&joints_),
          reinterpret_cast<char*>(&other->joints_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotPositionGoal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[5]);
}

// ===================================================================

class RobotVelocityGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotVelocityGoal>()._has_bits_);
  static const ::abb::egm::wrapper::Joints& joints(const RobotVelocityGoal* msg);
  static void set_has_joints(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::CartesianVelocity& cartesian(const RobotVelocityGoal* msg);
  static void set_has_cartesian(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::wrapper::Joints&
RobotVelocityGoal::_Internal::joints(const RobotVelocityGoal* msg) {
  return *msg->joints_;
}
const ::abb::egm::wrapper::CartesianVelocity&
RobotVelocityGoal::_Internal::cartesian(const RobotVelocityGoal* msg) {
  return *msg->cartesian_;
}
void RobotVelocityGoal::clear_joints() {
  if (joints_ != nullptr) joints_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RobotVelocityGoal::clear_cartesian() {
  if (cartesian_ != nullptr) cartesian_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RobotVelocityGoal::RobotVelocityGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.RobotVelocityGoal)
}
RobotVelocityGoal::RobotVelocityGoal(const RobotVelocityGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_joints()) {
    joints_ = new ::abb::egm::wrapper::Joints(*from.joints_);
  } else {
    joints_ = nullptr;
  }
  if (from._internal_has_cartesian()) {
    cartesian_ = new ::abb::egm::wrapper::CartesianVelocity(*from.cartesian_);
  } else {
    cartesian_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.RobotVelocityGoal)
}

inline void RobotVelocityGoal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&joints_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cartesian_) -
    reinterpret_cast<char*>(&joints_)) + sizeof(cartesian_));
}

RobotVelocityGoal::~RobotVelocityGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotVelocityGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete joints_;
  if (this != internal_default_instance()) delete cartesian_;
}

void RobotVelocityGoal::ArenaDtor(void* object) {
  RobotVelocityGoal* _this = reinterpret_cast< RobotVelocityGoal* >(object);
  (void)_this;
}
void RobotVelocityGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotVelocityGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotVelocityGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(joints_ != nullptr);
      joints_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cartesian_ != nullptr);
      cartesian_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotVelocityGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.Joints joints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_joints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cartesian(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RobotVelocityGoal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.Joints joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::joints(this), target, stream);
  }

  // optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cartesian(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  return target;
}

size_t RobotVelocityGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.Joints joints = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *joints_);
    }

    // optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cartesian_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotVelocityGoal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotVelocityGoal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotVelocityGoal::GetClassData() const { return &_class_data_; }

void RobotVelocityGoal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RobotVelocityGoal *>(to)->MergeFrom(
      static_cast<const RobotVelocityGoal &>(from));
}


void RobotVelocityGoal::MergeFrom(const RobotVelocityGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_joints()->::abb::egm::wrapper::Joints::MergeFrom(from._internal_joints());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cartesian()->::abb::egm::wrapper::CartesianVelocity::MergeFrom(from._internal_cartesian());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotVelocityGoal::CopyFrom(const RobotVelocityGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotVelocityGoal::IsInitialized() const {
  return true;
}

void RobotVelocityGoal::InternalSwap(RobotVelocityGoal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotVelocityGoal, cartesian_)
      + sizeof(RobotVelocityGoal::cartesian_)
      - PROTOBUF_FIELD_OFFSET(RobotVelocityGoal, joints_)>(
          reinterpret_cast<char*>(&joints_),
          reinterpret_cast<char*>(&other->joints_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotVelocityGoal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[6]);
}

// ===================================================================

class TrajectoryGoal::_Internal {
 public:
};

TrajectoryGoal::TrajectoryGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.TrajectoryGoal)
}
TrajectoryGoal::TrajectoryGoal(const TrajectoryGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.TrajectoryGoal)
}

inline void TrajectoryGoal::SharedCtor() {
}

TrajectoryGoal::~TrajectoryGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.TrajectoryGoal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrajectoryGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrajectoryGoal::ArenaDtor(void* object) {
  TrajectoryGoal* _this = reinterpret_cast< TrajectoryGoal* >(object);
  (void)_this;
}
void TrajectoryGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrajectoryGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrajectoryGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrajectoryGoal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.TrajectoryGoal)
  return target;
}

size_t TrajectoryGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrajectoryGoal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrajectoryGoal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrajectoryGoal::GetClassData() const { return &_class_data_; }

void TrajectoryGoal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrajectoryGoal *>(to)->MergeFrom(
      static_cast<const TrajectoryGoal &>(from));
}


void TrajectoryGoal::MergeFrom(const TrajectoryGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrajectoryGoal::CopyFrom(const TrajectoryGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryGoal::IsInitialized() const {
  return true;
}

void TrajectoryGoal::InternalSwap(TrajectoryGoal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryGoal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[7]);
}

// ===================================================================

class StaticPositionGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<StaticPositionGoal>()._has_bits_);
  static const ::abb::egm::wrapper::trajectory::RobotPositionGoal& robot(const StaticPositionGoal* msg);
  static void set_has_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::Joints& external(const StaticPositionGoal* msg);
  static void set_has_external(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::wrapper::trajectory::RobotPositionGoal&
StaticPositionGoal::_Internal::robot(const StaticPositionGoal* msg) {
  return *msg->robot_;
}
const ::abb::egm::wrapper::Joints&
StaticPositionGoal::_Internal::external(const StaticPositionGoal* msg) {
  return *msg->external_;
}
void StaticPositionGoal::clear_external() {
  if (external_ != nullptr) external_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StaticPositionGoal::StaticPositionGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.StaticPositionGoal)
}
StaticPositionGoal::StaticPositionGoal(const StaticPositionGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_robot()) {
    robot_ = new ::abb::egm::wrapper::trajectory::RobotPositionGoal(*from.robot_);
  } else {
    robot_ = nullptr;
  }
  if (from._internal_has_external()) {
    external_ = new ::abb::egm::wrapper::Joints(*from.external_);
  } else {
    external_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.StaticPositionGoal)
}

inline void StaticPositionGoal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&robot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&external_) -
    reinterpret_cast<char*>(&robot_)) + sizeof(external_));
}

StaticPositionGoal::~StaticPositionGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.StaticPositionGoal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StaticPositionGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete robot_;
  if (this != internal_default_instance()) delete external_;
}

void StaticPositionGoal::ArenaDtor(void* object) {
  StaticPositionGoal* _this = reinterpret_cast< StaticPositionGoal* >(object);
  (void)_this;
}
void StaticPositionGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StaticPositionGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StaticPositionGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(robot_ != nullptr);
      robot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(external_ != nullptr);
      external_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StaticPositionGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.Joints external = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_external(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StaticPositionGoal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::robot(this), target, stream);
  }

  // optional .abb.egm.wrapper.Joints external = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::external(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.StaticPositionGoal)
  return target;
}

size_t StaticPositionGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *robot_);
    }

    // optional .abb.egm.wrapper.Joints external = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *external_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StaticPositionGoal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StaticPositionGoal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StaticPositionGoal::GetClassData() const { return &_class_data_; }

void StaticPositionGoal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StaticPositionGoal *>(to)->MergeFrom(
      static_cast<const StaticPositionGoal &>(from));
}


void StaticPositionGoal::MergeFrom(const StaticPositionGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_robot()->::abb::egm::wrapper::trajectory::RobotPositionGoal::MergeFrom(from._internal_robot());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_external()->::abb::egm::wrapper::Joints::MergeFrom(from._internal_external());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StaticPositionGoal::CopyFrom(const StaticPositionGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticPositionGoal::IsInitialized() const {
  return true;
}

void StaticPositionGoal::InternalSwap(StaticPositionGoal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StaticPositionGoal, external_)
      + sizeof(StaticPositionGoal::external_)
      - PROTOBUF_FIELD_OFFSET(StaticPositionGoal, robot_)>(
          reinterpret_cast<char*>(&robot_),
          reinterpret_cast<char*>(&other->robot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticPositionGoal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[8]);
}

// ===================================================================

class StaticVelocityGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<StaticVelocityGoal>()._has_bits_);
  static const ::abb::egm::wrapper::trajectory::RobotVelocityGoal& robot(const StaticVelocityGoal* msg);
  static void set_has_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::Joints& external(const StaticVelocityGoal* msg);
  static void set_has_external(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::wrapper::trajectory::RobotVelocityGoal&
StaticVelocityGoal::_Internal::robot(const StaticVelocityGoal* msg) {
  return *msg->robot_;
}
const ::abb::egm::wrapper::Joints&
StaticVelocityGoal::_Internal::external(const StaticVelocityGoal* msg) {
  return *msg->external_;
}
void StaticVelocityGoal::clear_external() {
  if (external_ != nullptr) external_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StaticVelocityGoal::StaticVelocityGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.StaticVelocityGoal)
}
StaticVelocityGoal::StaticVelocityGoal(const StaticVelocityGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_robot()) {
    robot_ = new ::abb::egm::wrapper::trajectory::RobotVelocityGoal(*from.robot_);
  } else {
    robot_ = nullptr;
  }
  if (from._internal_has_external()) {
    external_ = new ::abb::egm::wrapper::Joints(*from.external_);
  } else {
    external_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.StaticVelocityGoal)
}

inline void StaticVelocityGoal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&robot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&external_) -
    reinterpret_cast<char*>(&robot_)) + sizeof(external_));
}

StaticVelocityGoal::~StaticVelocityGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StaticVelocityGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete robot_;
  if (this != internal_default_instance()) delete external_;
}

void StaticVelocityGoal::ArenaDtor(void* object) {
  StaticVelocityGoal* _this = reinterpret_cast< StaticVelocityGoal* >(object);
  (void)_this;
}
void StaticVelocityGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StaticVelocityGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StaticVelocityGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(robot_ != nullptr);
      robot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(external_ != nullptr);
      external_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StaticVelocityGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.Joints external = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_external(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StaticVelocityGoal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::robot(this), target, stream);
  }

  // optional .abb.egm.wrapper.Joints external = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::external(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  return target;
}

size_t StaticVelocityGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *robot_);
    }

    // optional .abb.egm.wrapper.Joints external = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *external_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StaticVelocityGoal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StaticVelocityGoal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StaticVelocityGoal::GetClassData() const { return &_class_data_; }

void StaticVelocityGoal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StaticVelocityGoal *>(to)->MergeFrom(
      static_cast<const StaticVelocityGoal &>(from));
}


void StaticVelocityGoal::MergeFrom(const StaticVelocityGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_robot()->::abb::egm::wrapper::trajectory::RobotVelocityGoal::MergeFrom(from._internal_robot());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_external()->::abb::egm::wrapper::Joints::MergeFrom(from._internal_external());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StaticVelocityGoal::CopyFrom(const StaticVelocityGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticVelocityGoal::IsInitialized() const {
  return true;
}

void StaticVelocityGoal::InternalSwap(StaticVelocityGoal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StaticVelocityGoal, external_)
      + sizeof(StaticVelocityGoal::external_)
      - PROTOBUF_FIELD_OFFSET(StaticVelocityGoal, robot_)>(
          reinterpret_cast<char*>(&robot_),
          reinterpret_cast<char*>(&other->robot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticVelocityGoal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[9]);
}

// ===================================================================

class ExecutionProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<ExecutionProgress>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sub_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::abb::egm::wrapper::Input& inputs(const ExecutionProgress* msg);
  static void set_has_inputs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::Output& outputs(const ExecutionProgress* msg);
  static void set_has_outputs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_passed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_goal_active(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::abb::egm::wrapper::trajectory::PointGoal& goal(const ExecutionProgress* msg);
  static void set_has_goal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::abb::egm::wrapper::trajectory::TrajectoryGoal& active_trajectory(const ExecutionProgress* msg);
  static void set_has_active_trajectory(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pending_trajectories(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::abb::egm::wrapper::Input&
ExecutionProgress::_Internal::inputs(const ExecutionProgress* msg) {
  return *msg->inputs_;
}
const ::abb::egm::wrapper::Output&
ExecutionProgress::_Internal::outputs(const ExecutionProgress* msg) {
  return *msg->outputs_;
}
const ::abb::egm::wrapper::trajectory::PointGoal&
ExecutionProgress::_Internal::goal(const ExecutionProgress* msg) {
  return *msg->goal_;
}
const ::abb::egm::wrapper::trajectory::TrajectoryGoal&
ExecutionProgress::_Internal::active_trajectory(const ExecutionProgress* msg) {
  return *msg->active_trajectory_;
}
void ExecutionProgress::clear_inputs() {
  if (inputs_ != nullptr) inputs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ExecutionProgress::clear_outputs() {
  if (outputs_ != nullptr) outputs_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ExecutionProgress::ExecutionProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.ExecutionProgress)
}
ExecutionProgress::ExecutionProgress(const ExecutionProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inputs()) {
    inputs_ = new ::abb::egm::wrapper::Input(*from.inputs_);
  } else {
    inputs_ = nullptr;
  }
  if (from._internal_has_outputs()) {
    outputs_ = new ::abb::egm::wrapper::Output(*from.outputs_);
  } else {
    outputs_ = nullptr;
  }
  if (from._internal_has_goal()) {
    goal_ = new ::abb::egm::wrapper::trajectory::PointGoal(*from.goal_);
  } else {
    goal_ = nullptr;
  }
  if (from._internal_has_active_trajectory()) {
    active_trajectory_ = new ::abb::egm::wrapper::trajectory::TrajectoryGoal(*from.active_trajectory_);
  } else {
    active_trajectory_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&pending_trajectories_) -
    reinterpret_cast<char*>(&state_)) + sizeof(pending_trajectories_));
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.ExecutionProgress)
}

inline void ExecutionProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inputs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pending_trajectories_) -
    reinterpret_cast<char*>(&inputs_)) + sizeof(pending_trajectories_));
}

ExecutionProgress::~ExecutionProgress() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.ExecutionProgress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete inputs_;
  if (this != internal_default_instance()) delete outputs_;
  if (this != internal_default_instance()) delete goal_;
  if (this != internal_default_instance()) delete active_trajectory_;
}

void ExecutionProgress::ArenaDtor(void* object) {
  ExecutionProgress* _this = reinterpret_cast< ExecutionProgress* >(object);
  (void)_this;
}
void ExecutionProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(inputs_ != nullptr);
      inputs_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(outputs_ != nullptr);
      outputs_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(goal_ != nullptr);
      goal_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(active_trajectory_ != nullptr);
      active_trajectory_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goal_active_) -
        reinterpret_cast<char*>(&state_)) + sizeof(goal_active_));
  }
  pending_trajectories_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.trajectory.ExecutionProgress.State state = 1 [default = UNDEFINED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::abb::egm::wrapper::trajectory::ExecutionProgress_State_IsValid(val))) {
            _internal_set_state(static_cast<::abb::egm::wrapper::trajectory::ExecutionProgress_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.trajectory.ExecutionProgress.SubState sub_state = 2 [default = NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::abb::egm::wrapper::trajectory::ExecutionProgress_SubState_IsValid(val))) {
            _internal_set_sub_state(static_cast<::abb::egm::wrapper::trajectory::ExecutionProgress_SubState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.Input inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.Output outputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_outputs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double time_passed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_time_passed(&has_bits);
          time_passed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool goal_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_goal_active(&has_bits);
          goal_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.trajectory.PointGoal goal = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_goal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_trajectory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pending_trajectories = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_pending_trajectories(&has_bits);
          pending_trajectories_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecutionProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.ExecutionProgress.State state = 1 [default = UNDEFINED];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // optional .abb.egm.wrapper.trajectory.ExecutionProgress.SubState sub_state = 2 [default = NONE];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sub_state(), target);
  }

  // optional .abb.egm.wrapper.Input inputs = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::inputs(this), target, stream);
  }

  // optional .abb.egm.wrapper.Output outputs = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::outputs(this), target, stream);
  }

  // optional double time_passed = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_time_passed(), target);
  }

  // optional bool goal_active = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_goal_active(), target);
  }

  // optional .abb.egm.wrapper.trajectory.PointGoal goal = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::goal(this), target, stream);
  }

  // optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::active_trajectory(this), target, stream);
  }

  // optional uint32 pending_trajectories = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pending_trajectories(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.ExecutionProgress)
  return target;
}

size_t ExecutionProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .abb.egm.wrapper.Input inputs = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inputs_);
    }

    // optional .abb.egm.wrapper.Output outputs = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *outputs_);
    }

    // optional .abb.egm.wrapper.trajectory.PointGoal goal = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *goal_);
    }

    // optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_trajectory_);
    }

    // optional .abb.egm.wrapper.trajectory.ExecutionProgress.State state = 1 [default = UNDEFINED];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional .abb.egm.wrapper.trajectory.ExecutionProgress.SubState sub_state = 2 [default = NONE];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sub_state());
    }

    // optional double time_passed = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional bool goal_active = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 pending_trajectories = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pending_trajectories());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecutionProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecutionProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecutionProgress::GetClassData() const { return &_class_data_; }

void ExecutionProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExecutionProgress *>(to)->MergeFrom(
      static_cast<const ExecutionProgress &>(from));
}


void ExecutionProgress::MergeFrom(const ExecutionProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_inputs()->::abb::egm::wrapper::Input::MergeFrom(from._internal_inputs());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_outputs()->::abb::egm::wrapper::Output::MergeFrom(from._internal_outputs());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_goal()->::abb::egm::wrapper::trajectory::PointGoal::MergeFrom(from._internal_goal());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_active_trajectory()->::abb::egm::wrapper::trajectory::TrajectoryGoal::MergeFrom(from._internal_active_trajectory());
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      sub_state_ = from.sub_state_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_passed_ = from.time_passed_;
    }
    if (cached_has_bits & 0x00000080u) {
      goal_active_ = from.goal_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_pending_trajectories(from._internal_pending_trajectories());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionProgress::CopyFrom(const ExecutionProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionProgress::IsInitialized() const {
  return true;
}

void ExecutionProgress::InternalSwap(ExecutionProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecutionProgress, pending_trajectories_)
      + sizeof(ExecutionProgress::pending_trajectories_)
      - PROTOBUF_FIELD_OFFSET(ExecutionProgress, inputs_)>(
          reinterpret_cast<char*>(&inputs_),
          reinterpret_cast<char*>(&other->inputs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionProgress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace trajectory
}  // namespace wrapper
}  // namespace egm
}  // namespace abb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::JointGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::JointGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::abb::egm::wrapper::trajectory::JointGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::CartesianGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::CartesianGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::abb::egm::wrapper::trajectory::CartesianGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::RobotGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::RobotGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::abb::egm::wrapper::trajectory::RobotGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::ExternalGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::ExternalGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::abb::egm::wrapper::trajectory::ExternalGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::PointGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::PointGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::abb::egm::wrapper::trajectory::PointGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::RobotPositionGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::RobotPositionGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::abb::egm::wrapper::trajectory::RobotPositionGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::RobotVelocityGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::RobotVelocityGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::abb::egm::wrapper::trajectory::RobotVelocityGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::TrajectoryGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::TrajectoryGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::abb::egm::wrapper::trajectory::TrajectoryGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::StaticPositionGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::StaticPositionGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::abb::egm::wrapper::trajectory::StaticPositionGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::StaticVelocityGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::StaticVelocityGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::abb::egm::wrapper::trajectory::StaticVelocityGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::ExecutionProgress* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::ExecutionProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::abb::egm::wrapper::trajectory::ExecutionProgress >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
